# -*- coding: utf-8 -*-

"""
   M2Factor.Controllers.SMSOTPController

   This file was automatically generated for 2Factor by APIMATIC BETA v2.0 on 02/18/2016
"""
import unirest

from M2Factor.APIHelper import APIHelper
from M2Factor.Configuration import Configuration
from M2Factor.APIException import APIException
from M2Factor.Models.CheckSmsBalanceModel import CheckSmsBalanceModel
from M2Factor.Models.SendingSmsOtpAutoGeneratedOtpModel import SendingSmsOtpAutoGeneratedOtpModel
from M2Factor.Models.SendingSmsOtpModel import SendingSmsOtpModel
from M2Factor.Models.VerifyOtpInputModel import VerifyOtpInputModel


class SMSOTPController(object):


    """A Controller to access Endpoints in the M2Factor API."""

    def get_check_sms_balance(self,
                              api_key):
        """Does a GET request to /API/V1/{api_key}/BAL/SMS.

        This endpoint is used to check SMS OTP balance

        Args:
            api_key (string): API Obtained From 2Factor.in

        Returns:
            CheckSmsBalanceModel: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/API/V1/{api_key}/BAL/SMS"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "api_key": api_key
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "2Factor",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return CheckSmsBalanceModel(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_sending_sms_otp_auto_generated_otp(self,
                                               api_key,
                                               phone_number):
        """Does a GET request to /API/V1/{api_key}/SMS/{phone_number}/AUTOGEN.

        This endpoint is used to send Auto Generated SMS OTP to India

        Args:
            api_key (string): API Obtained From 2Factor.in
            phone_number (string): 10 Digit Indian Phone Number

        Returns:
            SendingSmsOtpAutoGeneratedOtpModel: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/API/V1/{api_key}/SMS/{phone_number}/AUTOGEN"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "api_key": api_key,
            "phone_number": phone_number
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "2Factor",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SendingSmsOtpAutoGeneratedOtpModel(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_sending_sms_otp_custom_otp(self,
                                       api_key,
                                       otp,
                                       phone_number):
        """Does a GET request to /API/V1/{api_key}/SMS/{phone_number}/{otp}.

        This endpoint is used to send Custom SMS OTP to India

        Args:
            api_key (string): API Obtained From 2Factor.in
            otp (string): 4-6 Digit ( Numeric ) OTP code to be sent
            phone_number (string): 10 Digit Indian Phone Number

        Returns:
            SendingSmsOtpModel: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/API/V1/{api_key}/SMS/{phone_number}/{otp}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "api_key": api_key,
            "otp": otp,
            "phone_number": phone_number
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "2Factor",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SendingSmsOtpModel(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_verify_sms_otp_input(self,
                                 api_key,
                                 otp_input,
                                 session_id):
        """Does a GET request to /API/V1/{api_key}/SMS/VERIFY/{session_id}/{otp_input}.

        This endpoint is useful in verifying user entered OTP with sent OTP

        Args:
            api_key (string): API Obtained From 2Factor.in
            otp_input (string): OTP Value input by end user
            session_id (string): Verification session id returned in send OTP
                step

        Returns:
            VerifyOtpInputModel: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/API/V1/{api_key}/SMS/VERIFY/{session_id}/{otp_input}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "api_key": api_key,
            "otp_input": otp_input,
            "session_id": session_id
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "2Factor",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return VerifyOtpInputModel(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)
